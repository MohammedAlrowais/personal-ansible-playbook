import os
import json
import subprocess
from pathlib import Path
from libqtile import qtile
from libqtile.lazy import lazy
from libqtile.widget.image import Image
from libqtile.widget import Spacer, Backlight, Volume
from libqtile import hook, layout, bar, widget
from libqtile.config import Key, Group, Screen

from qtile_extras import widget
from qtile_extras.widget.decorations import RectDecoration
from qtile_extras.widget.decorations import PowerLineDecoration

# Get home path
home  = str(Path.home())


# Show wlan status bar widget (set to False if wired network)
show_wlan = True
show_bluetooth = False


mod = "mod4"  # Super key
keys = [
    Key([mod], "space", lazy.next_layout()),  # Cycle through layouts
    Key([mod], "q", lazy.window.kill()),
    Key([mod], "j", lazy.layout.down()),
    Key([mod], "k", lazy.layout.up()),
    Key([mod], "h", lazy.layout.left()),
    Key([mod], "l", lazy.layout.right()),

    # Sounds
    ## Volume up
    Key([], "XF86AudioRaiseVolume", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ +5%")),
    ## Volume down
    Key([], "XF86AudioLowerVolume", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ -5%")),
    ## Mute/unmute
    Key([], "XF86AudioMute", lazy.spawn("pactl set-sink-mute @DEFAULT_SINK@ toggle")),
    ## Open Pavucontrol for detailed control
    Key([mod], "p", lazy.spawn("pavucontrol")),

    # Window
    Key([mod, "shift"], "f",
        lazy.window.toggle_fullscreen(),
        desc="Toggle fullscreen",
    ),
    Key([mod, "shift"], "Return", lazy.layout.swap_main(), desc="Swap with master"),


    # Apps
    Key([mod], "Return", lazy.spawn("kitty")),
    Key([mod], "b", lazy.spawn("firefox")),
    Key([mod], "c", lazy.spawn("code")),
    Key([mod], "f", lazy.spawn("thunar")),
    Key([mod], "r", lazy.spawn("rofi -show drun")),
    Key([mod, "shift"], "w", lazy.spawn(home + "/.config/qtile/scripts/wallpaper.sh"), desc="Update Theme and Wallpaper"),
    Key([mod, "control"], "w", lazy.spawn(home + "/.config/qtile/scripts/wallpaper.sh select"), desc="Select Theme and Wallpaper"),

    # Resize
    Key([mod, "control"], "h", lazy.layout.shrink(), desc="Shrink window"),
    Key([mod, "control"], "l", lazy.layout.grow(), desc="Grow window"),

    #minimize
    Key([mod], "n", lazy.window.toggle_minimize()),
    Key([mod, "shift"], "n", lazy.group.unminimize_all()),

    # Shuffle
    Key([mod, "shift"], "l", lazy.layout.shuffle_left(), desc="Move window left"),
    Key([mod, "shift"], "h", lazy.layout.shuffle_right(), desc="Move window right"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),
]

# ----------------------------------------------
# Groups
# ----------------------------------------------
groups = [Group(i) for i in "12345"]

for i in groups:
    keys.extend([
        Key([mod], i.name, lazy.group[i.name].toscreen()),
        Key([mod, "shift"], i.name, lazy.window.togroup(i.name)),
    ])


# ----------------------------------------------
# Pywal Colors
# ----------------------------------------------
colors = os.path.expanduser('~/.cache/wal/colors.json')
colordict = json.load(open(colors))
Color0=(colordict['colors']['color0'])
Color1=(colordict['colors']['color1'])
Color2=(colordict['colors']['color2'])
Color3=(colordict['colors']['color3'])
Color4=(colordict['colors']['color4'])
Color5=(colordict['colors']['color5'])
Color6=(colordict['colors']['color6'])
Color7=(colordict['colors']['color7'])
Color8=(colordict['colors']['color8'])
Color9=(colordict['colors']['color9'])
Color10=(colordict['colors']['color10'])
Color11=(colordict['colors']['color11'])
Color12=(colordict['colors']['color12'])
Color13=(colordict['colors']['color13'])
Color14=(colordict['colors']['color14'])
Color15=(colordict['colors']['color15'])

# --------------------------------------------------------
# Setup Layout Theme
# --------------------------------------------------------

layout_theme = { 
    "border_width": 3,
    "margin": 10,
    "border_focus": "88c0d0",
    "border_normal": "FFFFFF",
    "single_border_width": 3
}

# --------------------------------------------------------
# Layouts
# --------------------------------------------------------

layouts = [
    layout.Max(**layout_theme),
    layout.MonadTall(**layout_theme),
    layout.MonadWide(**layout_theme),
    layout.RatioTile(**layout_theme),
]

# --------------------------------------------------------
# Setup Widget Defaults
# --------------------------------------------------------

widget_defaults = dict(
    font="Fira Sans SemiBold",
    fontsize=14,
    padding=3
)
extension_defaults = widget_defaults.copy()

decor_left = {
    "decorations": [
        PowerLineDecoration(
            path="arrow_left"
            # path="rounded_left"
            # path="forward_slash"
            # path="back_slash"
        )
    ],
}

decor_right = {
    "decorations": [
        PowerLineDecoration(
            path="arrow_right"
            # path="rounded_right"
            # path="forward_slash"
            # path="back_slash"
        )
    ],
}

# --------------------------------------------------------
# Widgets
# --------------------------------------------------------

widget_list = [
    widget.CurrentLayout(
        **decor_left, 
        background=Color1+".4",
        foreground='ffffff',
        desc='',
        padding=10,
        
    ),
    widget.GroupBox(
        **decor_left,
        background="#ffffff.7",
        highlight_method='block',
        highlight='ffffff',
        block_border='ffffff',
        highlight_color=['ffffff','ffffff'],
        block_highlight_text_color='000000',
        foreground='ffffff',
        rounded=False,
        this_current_screen_border='ffffff',
        active='ffffff'
    ),
    widget.WindowName(
        **decor_left,
        max_chars=50,
        background=Color2+".4",
        width=400,
        padding=10,
        format='{name}',
    ),
    widget.Spacer(),
    widget.Spacer(
        length=30
    ),
    widget.TextBox(
        **decor_right,
        background="#000000.3"      
    ),    
    widget.Memory(
        **decor_right,
        background=Color10+".4",
        padding=10,        
        measure_mem='G',
        format="{MemUsed:.0f}{mm} ({MemTotal:.0f}{mm})"
    ),
    widget.Volume(
        **decor_right,
        fmt='Vol: {}',
        mute_format='Muted',
        background=Color12+".4",
        volume_up_command="pactl set-sink-volume @DEFAULT_SINK@ +5%",
        volume_down_command="pactl set-sink-volume @DEFAULT_SINK@ -5%",
        mute_command="pactl set-sink-mute @DEFAULT_SINK@ toggle",
        get_volume_command="pactl get-sink-volume @DEFAULT_SINK@ | awk '{print $5}'",
        padding=10, 
    
    ),
    widget.DF(
        **decor_right,
        padding=10, 
        background=Color8+".4",        
        visible_on_warn=False,
        format="{p} {uf}{m} ({r:.0f}%)"
    ),
    widget.Bluetooth(
        **decor_right,
        background=Color2+".4",
        padding=10,
        mouse_callbacks={"Button1": lambda: qtile.cmd_spawn("blueman-manager")},
    ),
    #widget.Wlan(
        #**decor_right,
        #background=Color2+".4",
        #padding=10,
        #format='{essid} {percent:2.0%}',
        #mouse_callbacks={"Button1": lambda: qtile.cmd_spawn("alacritty -e nmtui")},
    #),
    widget.Clock(
        **decor_right,
        background=Color4+".4",   
        padding=10,      
        format="%Y-%m-%d / %I:%M %p",
    ),
]

# Hide Modules if not on laptop
#if (show_wlan == False):
    #del widget_list[13:14]

#if (show_bluetooth == False):
    #del widget_list[12:13]

# --------------------------------------------------------
# Screens
# --------------------------------------------------------

screens = [
    Screen(
        top=bar.Bar(
            widget_list,
            30,
            padding=20,
            opacity=0.7,
            border_width=[0, 0, 0, 0],
            margin=[0,0,0,0],
            background="#000000.3"
        ),
    ),
]

# ----------------------------------------------
# Autostart Hook
# ----------------------------------------------
@hook.subscribe.startup_once
def autostart():
    subprocess.run(["/usr/bin/bash", "/home/alialsada/.config/qtile/autostart.sh"])