from libqtile import hook, layout, bar, widget
from libqtile.config import Key, Group, Screen
from libqtile.lazy import lazy

mod = "mod4"  # Super key
keys = [
    Key([mod], "space", lazy.next_layout()),  # Cycle through layouts
    Key([mod], "q", lazy.window.kill()),
    Key([mod], "r", lazy.spawncmd()),
    Key([mod], "j", lazy.layout.down()),
    Key([mod], "k", lazy.layout.up()),
    Key([mod], "h", lazy.layout.left()),
    Key([mod], "l", lazy.layout.right()),

    # Sounds
    ## Volume up
    Key([], "XF86AudioRaiseVolume", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ +5%")),
    ## Volume down
    Key([], "XF86AudioLowerVolume", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ -5%")),
    ## Mute/unmute
    Key([], "XF86AudioMute", lazy.spawn("pactl set-sink-mute @DEFAULT_SINK@ toggle")),
    ## Open Pavucontrol for detailed control
    Key([mod], "p", lazy.spawn("pavucontrol")),

    # Window
    Key([mod, "shift"], "f",
        lazy.window.toggle_fullscreen(),
        desc="Toggle fullscreen",
    ),
    Key([mod, "shift"], "Return", lazy.layout.swap_main(), desc="Swap with master"),


    # Applications
    Key([mod], "Return", lazy.spawn("kitty")),
    Key([mod], "b", lazy.spawn("firefox")),
    Key([mod], "c", lazy.spawn("code")),
    Key([mod], "f", lazy.spawn("thunar")),

    # Resize
    Key([mod, "control"], "h", lazy.layout.shrink(), desc="Shrink window"),
    Key([mod, "control"], "l", lazy.layout.grow(), desc="Grow window"),
    Key([mod], "n", lazy.window.toggle_minimize()),
    Key([mod, "shift"], "n", lazy.group.unminimize_all()),

    # Shuffle
    Key([mod, "shift"], "l", lazy.layout.shuffle_left(), desc="Move window left"),
    Key([mod, "shift"], "h", lazy.layout.shuffle_right(), desc="Move window right"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),
]


groups = [Group(i) for i in "123456789"]

for i in groups:
    keys.extend([
        Key([mod], i.name, lazy.group[i.name].toscreen()),
        Key([mod, "shift"], i.name, lazy.window.togroup(i.name)),
    ])

layouts = [
    layout.Columns(num_columns=3),
    layout.MonadTall(),
]

screens = [
    Screen(top=bar.Bar([
        widget.CurrentLayout(),  # Displays the current layout name
        widget.GroupBox(),
        widget.Prompt(),
        widget.WindowName(),
        widget.Clock(format="%Y-%m-%d %H:%M"),
    ], 24)),
]

@hook.subscribe.startup_once
def autostart():
    # Restore Nitrogen wallpaper on startup
    os.system("/usr/bin/nitrogen --restore &")
