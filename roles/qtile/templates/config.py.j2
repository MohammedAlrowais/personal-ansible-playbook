import os
import json
import subprocess
from pathlib import Path
from libqtile.lazy import lazy
from libqtile.config import Key, Group, Screen
from libqtile import qtile, hook, layout, bar, widget, extension

# Get home path
home  = str(Path.home())

# Show wlan status bar widget (set to False if wired network)
show_wlan = True
show_bluetooth = False

mod = "mod4"  # Super key
keys = [

    Key([mod], "a", lazy.next_screen()),
    Key([mod], "s", lazy.prev_screen()),

    Key([mod], "space", lazy.next_layout()),  # Cycle through layouts
    Key([mod], "q", lazy.window.kill()),
    Key([mod], "j", lazy.layout.down()),
    Key([mod], "k", lazy.layout.up()),
    Key([mod], "h", lazy.layout.left()),
    Key([mod], "l", lazy.layout.right()),

    # Sounds
    ## Volume up
    Key([], "XF86AudioRaiseVolume", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ +5%")),
    ## Volume down
    Key([], "XF86AudioLowerVolume", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ -5%")),
    ## Mute/unmute
    Key([], "XF86AudioMute", lazy.spawn("pactl set-sink-mute @DEFAULT_SINK@ toggle")),
    ## Open Pavucontrol for detailed control
    Key([mod], "p", lazy.spawn("pavucontrol")),

    # Window
    Key([mod, "shift"], "f",
        lazy.window.toggle_fullscreen(),
        desc="Toggle fullscreen",
    ),
    Key([mod, "shift"], "Return", lazy.layout.swap_main(), desc="Swap with master"),


    # Apps
    Key([mod], "Return", lazy.spawn("kitty")),
    Key([mod], "b", lazy.spawn("firefox")),
    Key([mod], "c", lazy.spawn("code")),
    Key([mod], "f", lazy.spawn("thunar")),
    Key([mod], "r", lazy.spawn("rofi -show drun")),
    Key([mod, "shift"], "w", lazy.spawn(home + "/.config/qtile/scripts/wallpaper.sh"), desc="Update Theme and Wallpaper"),
    Key([mod, "control"], "w", lazy.spawn(home + "/.config/qtile/scripts/wallpaper.sh select"), desc="Select Theme and Wallpaper"),

    # Resize
    Key([mod, "control"], "h", lazy.layout.shrink(), desc="Shrink window"),
    Key([mod, "control"], "l", lazy.layout.grow(), desc="Grow window"),

    #minimize
    Key([mod], "n", lazy.window.toggle_minimize()),
    Key([mod, "shift"], "n", lazy.group.unminimize_all()),

    # Shuffle
    Key([mod, "shift"], "l", lazy.layout.shuffle_left(), desc="Move window left"),
    Key([mod, "shift"], "h", lazy.layout.shuffle_right(), desc="Move window right"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),
]

# ----------------------------------------------
# Groups
# ----------------------------------------------
groups = [Group(i) for i in "123456789"]

for i in groups:
    keys.extend([
        Key([mod], i.name, lazy.group[i.name].toscreen()),
        Key([mod, "shift"], i.name, lazy.window.togroup(i.name)),
    ])

# --------------------------------------------------------
# Colors
# --------------------------------------------------------
colors = [
    "#282c34",  # Background
    "#abb2bf",  # Foreground
    "#98c379",  # Green
    "#e06c75",  # Red
    "#61afef",  # Blue
    "#c678dd",  # Purple
    "#e5c07b",  # Yellow
    "#56b6c2",  # Cyan
    "#be5046",  # Orange
    "#5c6370",  # Gray
]

# --------------------------------------------------------
# Layout
# --------------------------------------------------------

layout_theme = { 
    "border_width": 3,
    "margin": 10,
    "border_focus": colors[8],
    "border_normal": colors[0],
    "single_border_width": 3
}

layouts = [
    layout.MonadTall(**layout_theme),
    layout.MonadWide(**layout_theme),
    layout.RatioTile(**layout_theme),
    layout.Max(**layout_theme),
    #layout.Bsp(**layout_theme),
    #layout.Floating(**layout_theme)
    #layout.RatioTile(**layout_theme),
    #layout.VerticalTile(**layout_theme),
    #layout.Matrix(**layout_theme),
    #layout.Stack(**layout_theme, num_stacks=2),
    #layout.Columns(**layout_theme),
    #layout.TreeTab(
    #     font = "Ubuntu Bold",
    #     fontsize = 11,
    #     border_width = 0,
    #     bg_color = colors[0],
    #     active_bg = colors[8],
    #     active_fg = colors[2],
    #     inactive_bg = colors[1],
    #     inactive_fg = colors[0],
    #     padding_left = 8,
    #     padding_x = 8,
    #     padding_y = 6,
    #     sections = ["ONE", "TWO", "THREE"],
    #     section_fontsize = 10,
    #     section_fg = colors[7],
    #     section_top = 15,
    #     section_bottom = 15,
    #     level_shift = 8,
    #     vspace = 3,
    #     panel_width = 240
    #     ),
    #layout.Zoomy(**layout_theme),
]

widget_defaults = dict(
    font="Ubuntu Bold",
    fontsize=16,
    padding=0,
    background=colors[0]
)

extension_defaults = widget_defaults.copy()


# --------------------------------------------------------
# Widgets
# --------------------------------------------------------
widget_list = [
    widget.Spacer(length = 12),
    widget.Prompt(
                font = "Ubuntu Mono",
                fontsize=16,
                foreground = colors[1]
    ),
    widget.GroupBox(
                fontsize = 16,
                margin_y = 5,
                margin_x = 8,
                padding_y = 0,
                padding_x = 1,
                borderwidth = 3,
                active = colors[8],
                inactive = colors[9],
                rounded = False,
                highlight_color = colors[2],
                highlight_method = "line",
                this_current_screen_border = colors[7],
                this_screen_border = colors [4],
                other_current_screen_border = colors[7],
                other_screen_border = colors[4],
                ),
    widget.TextBox(
                text = '|',
                font = "Ubuntu Mono",
                foreground = colors[9],
                padding = 2,
                fontsize = 16
                ),
    widget.CurrentLayout( 
                foreground = colors[1],
                padding = 5
                ),
    widget.TextBox(
                text = '|',
                font = "Ubuntu Mono",
                foreground = colors[9],
                padding = 2,
                fontsize = 16
                ),
    widget.WindowName(
                foreground = colors[6],
                padding = 4,
                max_chars = 40
                ),
    widget.CPU(
                format = 'ÔÉß Cpu: {load_percent}%',
                foreground = colors[4],
                padding = 6, 
                ),
    widget.Memory(
                foreground = colors[8],
                padding = 6, 
                # mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn(myTerm + ' -e htop')},
                format = '{MemUsed: .0f}{mm}',
                fmt = 'üñ•  Mem: {} used',
                ),
    widget.DF(
                update_interval = 60,
                foreground = colors[5],
                padding = 6, 
                # mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn(myTerm + ' -e df')},
                partition = '/',
                format = '{uf}{m} free',
                fmt = 'üñ¥  Disk: {}',
                visible_on_warn = False,
                ),
    widget.Volume(
                foreground = colors[7],
                padding = 6,
                fmt = 'üï´  Vol: {}',
                volume_up_command="pactl set-sink-volume @DEFAULT_SINK@ +5%",
                volume_down_command="pactl set-sink-volume @DEFAULT_SINK@ -5%",
                mute_command="pactl set-sink-mute @DEFAULT_SINK@ toggle",
                check_mute_command="pactl get-sink-mute @DEFAULT_SINK@ | grep -o 'yes'",
                check_mute_string="yes",
                get_volume_command="pactl get-sink-volume @DEFAULT_SINK@ | awk '{print $5}'",
                ),
    widget.KeyboardLayout(
                foreground = colors[4],
                padding = 6, 
                fmt = '‚å®  Kbd: {}',
                ),
    widget.Clock(
                foreground = colors[8],
                padding = 6, 
                format = "‚è±  %a, %b %d - %H:%M",
                ),
    widget.Systray(padding = 3),
    widget.Spacer(length = 8),
]


# --------------------------------------------------------
# Screens
# --------------------------------------------------------

screens = [
    Screen(
        top=bar.Bar(
            widget_list,
            30,
            padding=15,
            opacity=0.7,
            border_width=[0, 0, 0, 0],
            margin=[0,0,0,0],
            background="#000000"
        ),
    ),
]

# ----------------------------------------------
# Autostart Hook
# ----------------------------------------------
@hook.subscribe.startup_once
def autostart():
    subprocess.run(["/usr/bin/bash", "/home/{{ username }}/.config/qtile/scripts/autostart.sh"])